		// Solutions for Project 3
		// J. Michael Dean
		//
		// This file is part of www.nand2tetris.org
		// and the book "The Elements of Computing Systems"
		// by Nisan and Schocken, MIT Press.
		// File name: projects/03/a/Bit.hdl
		
		/**
		 * 1-bit register:
		 * If load[t] == 1 then out[t+1] = in[t]
		 *                 else out does not change (out[t+1] = out[t])
		 */
		
		CHIP Bit {
		    IN in, load;
		    OUT out;
		
		    PARTS:
			Mux(a=outValue, b=in, sel=load, out=muxOut);
			DFF(in=muxOut, out=out, out=outValue);
		}


		// This file is part of www.nand2tetris.org
		// and the book "The Elements of Computing Systems"
		// by Nisan and Schocken, MIT Press.
		// File name: projects/03/a/Register.hdl
		
		/**
		 * 16-bit register:
		 * If load[t] == 1 then out[t+1] = in[t]
		 * else out does not change
		 */
		
		CHIP Register {
		    IN in[16], load;
		    OUT out[16];
		
		    PARTS:
		    Bit(in=in[0],out=out[0],load=load);
			Bit(in=in[1],out=out[1],load=load);
			Bit(in=in[2],out=out[2],load=load);
			Bit(in=in[3],out=out[3],load=load);
			Bit(in=in[4],out=out[4],load=load);
			Bit(in=in[5],out=out[5],load=load);
			Bit(in=in[6],out=out[6],load=load);
			Bit(in=in[7],out=out[7],load=load);
			Bit(in=in[8],out=out[8],load=load);
			Bit(in=in[9],out=out[9],load=load);
			Bit(in=in[10],out=out[10],load=load);
			Bit(in=in[11],out=out[11],load=load);
			Bit(in=in[12],out=out[12],load=load);
			Bit(in=in[13],out=out[13],load=load);
			Bit(in=in[14],out=out[14],load=load);
			Bit(in=in[15],out=out[15],load=load);
			
		}


		// This file is part of www.nand2tetris.org
		// and the book "The Elements of Computing Systems"
		// by Nisan and Schocken, MIT Press.
		// File name: projects/03/a/RAM8.hdl
		
		/**
		 * Memory of 8 registers, each 16 bit-wide. Out holds the value
		 * stored at the memory location specified by address. If load==1, then 
		 * the in value is loaded into the memory location specified by address 
		 * (the loaded value will be emitted to out from the next time step onward).
		 */
		
		CHIP RAM8 {
		    IN in[16], load, address[3];
		    OUT out[16];
		
		    PARTS:
		    DMux8Way(in=load, sel=address, a=a, b=b, c=c, d=d, e=e, f=f, g=g,h=h);
			Register(in=in, load=a, out=outA);
			Register(in=in, load=b, out=outB);
			Register(in=in, load=c, out=outC);
			Register(in=in, load=d, out=outD);
			Register(in=in, load=e, out=outE);
			Register(in=in, load=f, out=outF);
			Register(in=in, load=g, out=outG);
			Register(in=in, load=h, out=outH);
			Mux8Way16(a=outA, b=outB, c=outC, d=outD,e=outE, f=outF, g=outG, h=outH,sel=address,out=out);
		}

		// This file is part of www.nand2tetris.org
		// and the book "The Elements of Computing Systems"
		// by Nisan and Schocken, MIT Press.
		// File name: projects/03/a/RAM64.hdl
		
		/**
		 * Memory of 64 registers, each 16 bit-wide. Out holds the value
		 * stored at the memory location specified by address. If load==1, then 
		 * the in value is loaded into the memory location specified by address 
		 * (the loaded value will be emitted to out from the next time step onward).
		 */
		
		CHIP RAM64 {
		    IN in[16], load, address[6];
		    OUT out[16];
		
		    PARTS:
			DMux8Way(in=load, sel=address[3..5], a=a, b=b, c=c, d=d, e=e, f=f, g=g,h=h);
		    RAM8(in=in, load=a, address=address[0..2],out=outA);
			RAM8(in=in, load=b, address=address[0..2],out=outB);
			RAM8(in=in, load=c, address=address[0..2],out=outC);
			RAM8(in=in, load=d, address=address[0..2],out=outD);
			RAM8(in=in, load=e, address=address[0..2],out=outE);
			RAM8(in=in, load=f, address=address[0..2],out=outF);
			RAM8(in=in, load=g, address=address[0..2],out=outG);
			RAM8(in=in, load=h, address=address[0..2],out=outH);
			Mux8Way16(a=outA, b=outB, c=outC, d=outD,e=outE, f=outF, g=outG, h=outH, sel=address[3..5], out=out);
		}
		// This file is part of the materials accompanying the book 
		// "The Elements of Computing Systems" by Nisan and Schocken, 
		// MIT Press. Book site: www.idc.ac.il/tecs
		// File name: projects/03/b/RAM512.hdl
		
		/**
		 * Memory of 512 registers, each 16 bit-wide. Out holds the value
		 * stored at the memory location specified by address. If load==1, then 
		 * the in value is loaded into the memory location specified by address 
		 * (the loaded value will be emitted to out from the next time step onward).
		 */
		
		CHIP RAM512 {
		    IN in[16], load, address[9];
		    OUT out[16];
		
		    PARTS:
		    DMux8Way(in=load, sel=address[6..8], a=a, b=b, c=c, d=d, e=e, f=f, g=g,h=h);
		    RAM64(in=in, load=a, address=address[0..5],out=outA);
			RAM64(in=in, load=b, address=address[0..5],out=outB);
			RAM64(in=in, load=c, address=address[0..5],out=outC);
			RAM64(in=in, load=d, address=address[0..5],out=outD);
			RAM64(in=in, load=e, address=address[0..5],out=outE);
			RAM64(in=in, load=f, address=address[0..5],out=outF);
			RAM64(in=in, load=g, address=address[0..5],out=outG);
			RAM64(in=in, load=h, address=address[0..5],out=outH);
			Mux8Way16(a=outA, b=outB, c=outC, d=outD,e=outE, f=outF, g=outG, h=outH, sel=address[6..8], out=out);
		}

		// This file is part of www.nand2tetris.org
		// and the book "The Elements of Computing Systems"
		// by Nisan and Schocken, MIT Press.
		// File name: projects/03/b/RAM4K.hdl
		
		/**
		 * Memory of 4K registers, each 16 bit-wide. Out holds the value
		 * stored at the memory location specified by address. If load==1, then 
		 * the in value is loaded into the memory location specified by address 
		 * (the loaded value will be emitted to out from the next time step onward).
		 */
		
		CHIP RAM4K {
		    IN in[16], load, address[12];
		    OUT out[16];
		
		    PARTS:
			DMux8Way(in=load, sel=address[9..11], a=a, b=b, c=c, d=d, e=e, f=f, g=g,h=h);
		    RAM512(in=in, load=a, address=address[0..8],out=outA);
			RAM512(in=in, load=b, address=address[0..8],out=outB);
			RAM512(in=in, load=c, address=address[0..8],out=outC);
			RAM512(in=in, load=d, address=address[0..8],out=outD);
			RAM512(in=in, load=e, address=address[0..8],out=outE);
			RAM512(in=in, load=f, address=address[0..8],out=outF);
			RAM512(in=in, load=g, address=address[0..8],out=outG);
			RAM512(in=in, load=h, address=address[0..8],out=outH);
			Mux8Way16(a=outA, b=outB, c=outC, d=outD,e=outE, f=outF, g=outG, h=outH, sel=address[9..11], out=out);
		}

		// This file is part of www.nand2tetris.org
		// and the book "The Elements of Computing Systems"
		// by Nisan and Schocken, MIT Press.
		// File name: projects/03/b/RAM16K.hdl
		
		/**
		 * Memory of 16K registers, each 16 bit-wide. Out holds the value
		 * stored at the memory location specified by address. If load==1, then 
		 * the in value is loaded into the memory location specified by address 
		 * (the loaded value will be emitted to out from the next time step onward).
		 */
		
		CHIP RAM16K {
		    IN in[16], load, address[14];
		    OUT out[16];
		
		    PARTS:
			DMux4Way(in=load, sel=address[12..13], a=a, b=b, c=c, d=d);
		    RAM4K(in=in, load=a, address=address[0..11],out=outA);
			RAM4K(in=in, load=b, address=address[0..11],out=outB);
			RAM4K(in=in, load=c, address=address[0..11],out=outC);
			RAM4K(in=in, load=d, address=address[0..11],out=outD);
			Mux4Way16(a=outA, b=outB, c=outC, d=outD, sel=address[12..13], out=out);
		}

		// This file is part of www.nand2tetris.org
		// and the book "The Elements of Computing Systems"
		// by Nisan and Schocken, MIT Press.
		// File name: projects/03/a/PC.hdl
		
		/**
		 * A 16-bit counter with load and reset control bits.
		 * if      (reset[t] == 1) out[t+1] = 0
		 * else if (load[t] == 1)  out[t+1] = in[t]
		 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
		 * else                    out[t+1] = out[t]
		 */
		
		CHIP PC {
		    IN in[16],load,inc,reset;
		    OUT out[16];
		
		    PARTS:
			Mux16(a=false,b=false,sel=true, out=registerResetValue);
			Mux16(a=in,b=in,sel=true,out=loadedNewValue);
			Inc16(in=pcValue,out=pcIncrementedValue);
			
			Mux8Way16(a=pcValue,b=pcIncrementedValue,c=loadedNewValue,
			d=loadedNewValue,e=registerResetValue,f=registerResetValue,
			g=registerResetValue,h=registerResetValue, sel[2]=reset, 
			sel[1]=load, sel[0]=inc,  out=newValue);
		
			Register(in=newValue , load=true , out=out, out=pcValue);
			
			
		}

