// Project 5 Solutions
// J. Michael Dean

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	Xor(a=true, b=address[14],out=ram16Address);
	And(a=address[14], b= address[13], out = keyboardAddress);
	Not(in=ram16Address, out = notScreen);
	Not(in = keyboardAddress, out = notKeyboard);
	And(a= notScreen,b=notKeyboard, out=screenAddress);
	// Now I have ram, screen or keyboard as true
	// Use these as the load and shoot into all three
	And(a=ram16Address, b=load, out=ramLoad);
	And(a=screenAddress, b=load, out=screenLoad);
	RAM16K(in=in,load=ramLoad, address=address[0..13], out=outRam);
	Screen(in=in, load=screenLoad, address=address[0..12], out=outScreen);
	Keyboard(out=outKey);
	// Now figure out the single output of the whole RAM
	Mux16(a=false, b=outRam, sel=ram16Address, out=firstMuxOut);
	Mux16(b=outScreen, a=firstMuxOut, sel=screenAddress, out=secondMuxOut);
	Mux16(b=outKey, a=secondMuxOut, sel=keyboardAddress, out=out);

}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Mux(a=true, b=instruction[5], sel=instruction[15], out=loadA);
	And(a=instruction[4], b=instruction[15], out=loadD);
	And(a=instruction[3], b=instruction[15], out=writeM);
    Mux16(a=instruction, b=ALUoutput, sel=instruction[15], out=firstMuxOut);
	ARegister(in=firstMuxOut, load=loadA, out = ARegisterOutput, out[0..14]=addressM);
	DRegister(in=ALUoutput, load=loadD, out = DRegisterOutput);
	Mux16(a=ARegisterOutput, b=inM, sel = instruction[12], out=secondMuxOut);
	// create jump logic using 8 way Mux, but only pay attention to bit zero
	Or(a=ng, b=zr, out=ngORzr);
	Not(in=ngORzr, out=input1);
	Not(in=ng, out=input3);
	Not(in=zr, out=input5);
	Or(a=zr, b=ng, out=input6);
	Mux8Way16(a=false, b[0]=input1, c[0]=zr, d[0]=input3, e[0]= ng, f[0]=input5,g[0]=input6,h[0]=true,sel=instruction[0..2], out[0]=jumpFlag);
	And(a=jumpFlag, b=instruction[15], out = jump);
	
	Xor(a=jump, b=true, out=increment);
	And(a=jump, b=instruction[15], out=loadPC);
	PC(in=ARegisterOutput,load=loadPC, inc=increment, reset=reset,out[0..14]=pc);
	ALU(x=DRegisterOutput, y=secondMuxOut,
		zx=instruction[11],
		nx=instruction[10],
		zy=instruction[9],
		ny=instruction[8],
		f= instruction[7],
		no= instruction[6],
		out= ALUoutput, out=outM, zr=zr, ng=ng);

}